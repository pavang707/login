{"version":3,"sources":["Google.js","App.js","serviceWorker.js","index.js"],"names":["Google","require","state","isLoggedIN","isLoggedINtwitter","isLoggedINgoogle","isLoggedINfacebook","email","name","image","nameF","nametwitter","imageurl","lastContent","Twitterlogin","Googlelogin","logout","fbContent","content","responseGoogle","response","console","log","setState","profileObj","imageUrl","this","className","onClick","style","justifyContent","margin","alt","src","width","height","marginTop","marginBottom","appId","autoLoad","fields","callback","picture","cssClass","icon","marginLeft","textButton","clientId","render","renderProps","disabled","onSuccess","buttonText","onFailure","authCallback","err","screen_name","consumerKey","consumerSecret","callbackUrl","children","id","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9247c8b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {GoogleLogin } from 'react-google-login'\r\nimport TwitterLogin from 'react-twitter-login'\r\nimport FacebookLogin from 'react-facebook-login'\r\nvar FontAwesome = require('react-fontawesome')\r\n\r\nclass Google extends Component{\r\n  state={\r\n    isLoggedIN:false,\r\n    isLoggedINtwitter: false,\r\n    isLoggedINgoogle: false,\r\n    isLoggedINfacebook:false,\r\n    email: \"\",\r\n    name:\"\",\r\n    image:\"\",\r\n    nameF:\"\",\r\n    nametwitter:\"\",\r\n    imageurl:\"\",\r\n\r\n  }\r\n   render(){\r\n     let lastContent\r\n    let Twitterlogin,navbar\r\n    let Googlelogin,logout\r\nlet fbContent,content\r\n\r\nlet responseFacebook=(response) => {\r\n  console.log(response)\r\n  this.setState({\r\n      isLoggedIN:true,\r\n      isLoggedINfacebook:true,\r\n      nameF: response.name,\r\n      imageurl:response.picture\r\n\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n    const  authHandler= (err,response)=>{\r\n          console.log(err,response)\r\n          this.setState({\r\n              isLoggedINtwitter:true,\r\n              isLoggedIN:true,\r\n              nametwitter:response.screen_name\r\n          })\r\n      }\r\n\r\n\r\n\r\n      const responseGoogle = (response) => {\r\n        console.log(response)\r\n        \r\n        this.setState({\r\n          isLoggedINgoogle:true,\r\n          isLoggedIN:true,\r\n          name: response.profileObj.name,\r\n          email:response.profileObj.email,\r\n          image:response.profileObj.imageUrl\r\n       \r\n        })\r\n      }\r\n      logout=()=>{\r\n        this.setState({\r\n          isLoggedIN:false,\r\n          isLoggedINgoogle:false,\r\n          isLoggedINtwitter:false,\r\n          isLoggedINfacebook:false\r\n        })\r\n      }\r\n\r\n   \r\n\r\n\r\n\r\n\r\n      if(this.state.isLoggedINtwitter){\r\n        Twitterlogin=(\r\n          <div >\r\n              <h4>Welcome {this.state.nametwitter}</h4>\r\n\r\n                    <button className=\"btn btn-danger\" onClick={logout}>Logout</button>\r\n\r\n          </div>\r\n      )\r\n      }\r\n\r\n\r\n\r\n    if(this.state.isLoggedINgoogle){\r\n    \r\n      Googlelogin=(\r\n          <div className=\"aftergooglelogin\">\r\n            <h4 style={{justifyContent:\"center\",margin:\"0\"}}>Welcome {this.state.name}</h4>\r\n            <img className=\"googleimg\" alt={this.state.name} src={this.state.image} style={{width:\"150px\",height:\"150px\"}} />\r\n            <div>\r\n            <button  className=\"btn btn-danger\" onClick={logout} style={{marginTop:\"10px\",marginBottom:\"10px\"}}>Logout</button>\r\n            \r\n              </div>\r\n            </div>\r\n        )  \r\n  }\r\n\r\n\r\nif(this.state.isLoggedINfacebook){\r\n  fbContent=(\r\n    <div>\r\n      <h4>Welcome {this.state.nameF}</h4>\r\n      <div>\r\n      <img src={this.state.imageurl} alt={this.state.name}/>\r\n        </div>\r\n    <button className=\"btn btn-danger\" onClick={logout}>Logout</button>\r\n            \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nif(!this.state.isLoggedIN){\r\n  \r\n  \r\n   \r\n  content=(\r\n    <div className=\"content \">\r\n        \r\n        Let Choose any one login method to get your Credentials\r\n   \r\n      </div>\r\n  )\r\n  \r\n  fbContent=(\r\n    <div >\r\n    <FacebookLogin\r\n    appId=\"2829196113969850\"\r\n    autoLoad={false}\r\n    fields=\"name,email,picture\"\r\n    callback={responseFacebook}\r\n    cssClass=\"btnFacebook\"\r\n    icon={<i className=\"fa fa-facebook\" style={{marginLeft:'5px'}}>\r\n    </i>}\r\n    textButton = \"&nbsp;&nbsp;Sign In with Facebook\"        \r\n    />\r\n</div>    \r\n    \r\n    \r\n    )\r\n    \r\n \r\n   \r\n  Googlelogin=(\r\n <GoogleLogin\r\n    clientId=\"994413254701-1f6ok1focicpgreh4m2d7v2166p9urcb.apps.googleusercontent.com\"\r\n    render={renderProps => (\r\n      <button className=\"btnGoogle\" onClick={renderProps.onClick} disabled={renderProps.disabled}><i className=\"fa fa-google-plus\" style={{ marginLeft: \r\n        '5px' }}/> \r\n        <span>&nbsp;&nbsp;Sign In with Google</span>                                                               \r\n </button>\r\n    )}\r\n    onSuccess={responseGoogle}\r\n    buttonText=\"Login with Google\"\r\n    onFailure={responseGoogle}\r\n  />\r\n     \r\n        \r\n    \r\n    )\r\n   \r\n  \r\n  Twitterlogin=(\r\n   \r\n    <TwitterLogin\r\n    authCallback={authHandler}\r\n    consumerKey={\"W4c3Zfyt1Q1MCuzKk5ps5SuSm\"}\r\n    consumerSecret={\"JjzOVXAn56a6vuGFJzPHrc9a0alKQq1HRvG0iD1bFzcHJOy974\"}\r\n    callbackUrl={\"https://pavang707.github.io/login\"}\r\n    children={<button className=\"btntwitter\"><i className=\"fa fa-twitter\" style={{ marginLeft: \r\n      '5px' }}/>\r\n       <span>&nbsp;&nbsp;Sign In with Twitter</span>\r\n      </button>}\r\n      \r\n  /> \r\n  )\r\n  \r\n\r\n    \r\n\r\n  lastContent=(\r\n    <div id=\"lastcontent\">\r\n      By Continuing your agree to our <b>Terms and Condition</b>\r\n      \r\n      </div>\r\n  )\r\n \r\n    }\r\n//finish isloggedin false\r\n      \r\n\r\n    return(\r\n\r\n   <div className=\"jumbotron \" id=\"whole\">\r\n       \r\n           \r\n       {content}    \r\n   \r\n    <div className=\"row\">\r\n    <div className=\"col-12 \"id=\"cr7\">\r\n      {Googlelogin}       \r\n  \r\n     </div> \r\n     <div className=\"col-12 google\"id=\"cr7\">\r\n   \r\n     {fbContent}\r\n\r\n </div>\r\n <div className=\"col-12\"id=\"cr7\">\r\n \r\n {Twitterlogin}\r\n \r\n </div>\r\n <div id=\"lastcontent\">\r\n   {lastContent}\r\n   </div>\r\n\r\n      </div>\r\n   \r\n   </div>\r\n         \r\n        \r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default Google;","import './App.css';\nimport Google from './Google'\nimport React from 'react';\nimport FacebookLoginWithButton from 'react-facebook-login';\nimport GoogleLoginButton from 'react-social-login-buttons'\nclass App extends React.Component {\n    \n  render() {\n    return (\n\n      <>\n      \n      <div className=\"bbt\">\n      <Google/>\n         </div>\n       \n       \n      </>\n      \n      \n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}